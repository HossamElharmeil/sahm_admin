{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","views/messages/Messages.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","getBadge","status","Messages","history","useHistory","queryPage","useLocation","search","match","currentPage","Number","useState","page","setPage","useEffect","dispatch","useDispatch","getMessages","messages","useSelector","state","className","items","fields","key","_classes","hover","striped","itemsPerPage","activePage","clickableRows","onRowClick","item","id","scopedSlots","color","onActivePageChange","newPage","pages","doubleArrows","align"],"mappings":"2NAIe,SAASA,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,GAAsB,qBAAXG,QAA4BA,OAAOC,YAAYC,OAAON,GAAjE,CACA,IAAIO,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAEThB,GAAKM,EAAKW,SAAWjB,GAH8CO,GAAK,IAK9E,MAAOW,GACPV,GAAK,EACLC,EAAKS,EACL,QACA,IACOX,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBP,EAAKC,IAAM,OAAAmB,EAAA,GAA2BpB,EAAKC,IGLjF,WACb,MAAM,IAAIoB,UAAU,6IHIgF,K,sGIWhGC,EAAW,SAAAC,GACf,OAAQA,GACN,IAAK,SAAU,MAAO,UACtB,IAAK,WAAY,MAAO,YACxB,IAAK,UAAW,MAAO,UACvB,IAAK,SAAU,MAAO,SACtB,QAAS,MAAO,YAwELC,UApEE,WACf,IAAMC,EAAUC,cACVC,EAAYC,cAAcC,OAAOC,MAAM,gBAAiB,IACxDC,EAAcC,OAAOL,GAAaA,EAAU,GAAKA,EAAU,GAAK,GAHjD,EAIGM,mBAASF,GAJZ,mBAIdG,EAJc,KAIRC,EAJQ,KAUrBC,qBAAU,WACRL,IAAgBG,GAAQC,EAAQJ,KAC/B,CAACA,EAAaG,IAEjB,IAAMG,EAAWC,cAEjBF,qBAAU,WACRC,EAASE,iBACR,CAACF,IAEJ,IAAMG,EAAWC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,YAE5C,OACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,eAAC,IAAD,sBAEE,uBAAOG,UAAU,aAAjB,yBAEF,eAAC,IAAD,WACA,cAAC,IAAD,CACEC,MAAOJ,EACPK,OAAQ,CACN,CAAEC,IAAK,OAAQC,SAAU,oBACzB,QAAS,WAEXC,OAAK,EACLC,SAAO,EACPC,aAAc,EACdC,WAAYjB,EACZkB,eAAa,EACbC,WAAY,SAACC,GAAD,OAAU7B,EAAQT,KAAR,oBAA0BsC,EAAKC,MACrDC,YAAe,CACb,OACE,SAACF,GAAD,OACE,6BACE,cAAC,IAAD,CAAQG,MAAOnC,EAASgC,EAAK/B,QAA7B,SACG+B,EAAK/B,eAMlB,cAAC,IAAD,CACE4B,WAAYjB,EACZwB,mBAlDS,SAAAC,GACjB5B,IAAgB4B,GAAWlC,EAAQT,KAAR,yBAA+B2C,KAkDlDC,MAAOpB,EAAStB,OAAS,EACzB2C,cAAc,EACdC,MAAM","file":"static/js/8.2e1127ce.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport {\n  CBadge,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CDataTable,\n  CRow,\n  CPagination\n} from '@coreui/react'\n\nimport { getMessages } from 'src/redux/actions'\n\nconst getBadge = status => {\n  switch (status) {\n    case 'Active': return 'success'\n    case 'Inactive': return 'secondary'\n    case 'Pending': return 'warning'\n    case 'Banned': return 'danger'\n    default: return 'primary'\n  }\n}\n\nconst Messages = () => {\n  const history = useHistory()\n  const queryPage = useLocation().search.match(/page=([0-9]+)/, '')\n  const currentPage = Number(queryPage && queryPage[1] ? queryPage[1] : 1)\n  const [page, setPage] = useState(currentPage)\n\n  const pageChange = newPage => {\n    currentPage !== newPage && history.push(`/messages?page=${newPage}`)\n  }\n\n  useEffect(() => {\n    currentPage !== page && setPage(currentPage)\n  }, [currentPage, page])\n  \n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(getMessages())\n  }, [dispatch])\n\n  const messages = useSelector(state => state.messages)\n\n  return (\n    <CRow>\n      <CCol>\n        <CCard>\n          <CCardHeader>\n            Messages\n            <small className=\"text-muted\"> example</small>\n          </CCardHeader>\n          <CCardBody>\n          <CDataTable\n            items={messages}\n            fields={[\n              { key: 'name', _classes: 'font-weight-bold' },\n              'email', 'subject'\n            ]}\n            hover\n            striped\n            itemsPerPage={5}\n            activePage={page}\n            clickableRows\n            onRowClick={(item) => history.push(`/messages/${item.id}`)}\n            scopedSlots = {{\n              'status':\n                (item)=>(\n                  <td>\n                    <CBadge color={getBadge(item.status)}>\n                      {item.status}\n                    </CBadge>\n                  </td>\n                )\n            }}\n          />\n          <CPagination\n            activePage={page}\n            onActivePageChange={pageChange}\n            pages={messages.length / 5}\n            doubleArrows={false} \n            align=\"center\"\n          />\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default Messages\n"],"sourceRoot":""}